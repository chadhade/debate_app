<%-# JAVASCRIPT FOR AJAX - BEGINNING%>
<script type="text/javascript">
$(function() {
  updateArguments();
});

function updateArguments() {
  var debate_id = $("#debate").attr("data-id");
  var after = $(".argument:last-child").attr("data-time");
  $.getScript("/arguments.js?debate_id=" + debate_id + "&after=" + after, function() {updateArguments()});
}
</script>
<%-# JAVASCRIPT FOR AJAX - END%>

<script type="text/javascript">
	// This function assures that the javascript runs only once the whole page is loaded
	$(document).ready(function() {
	
		//time to countdown in seconds, and element ID
		javascript_countdown.init(<%= @movingclock %>, <%= @staticclock %>, <%= @movingposition %>);
	});
</script>

<div id="debate" data-id="<%= @debate.id %>"> This is debate id = <%= @debate.id %> </div>
<div style="float:left";>Time Left for Debater 1: &nbsp;</div><div id="position_1"></div>
<div style="float:left";>Time Left for Debater 2: &nbsp;</div><div id="position_2"></div>
<br />

<%-# list arguments for the debate %>
<% @arguments.each do |argument| %>
  <div class="argument" data-time="<%= argument.created_at.to_i %>"> <%= argument.content %> </div> <br>
<% end %>  

<br>

<%-# allow debater to join debate or argue if it is his turn%>
<% if @debate.debaters.size == 1 %>
  <%= render 'debates/form_join_debate' if !@debate.creator?(current_debater) %>
<% else %>
  <%= render 'arguments/form_argument' if @debate.current_turn?(current_debater) %>
<% end %>

<br>

<%= @debate.current_turn.nil? ? "no one has joined" : @debate.current_turn.name %>

<p><%= link_to "Back to Debate List", debates_path %></p>

<script>
var javascript_countdown = function () {
	
	var keep_counting = 1;
	var no_time_left_message = 'This Debater has no time!';
 
	
	function countdown() {
		
		if(moving_clock < 2) {
			keep_counting = 0;
		}
				
		moving_clock = moving_clock - 1;
		}
 
	function add_leading_zero(n) {
		if(n.toString().length < 2) {
			return '0' + n;
		} else {
			return n;
		}
	}

	function format_output(timetoformat) {
		var hours, minutes, seconds;
		seconds = timetoformat % 60;
		minutes = Math.floor(timetoformat / 60) % 60;
		hours = Math.floor(timetoformat / 3600);
 
		seconds = add_leading_zero( seconds );
		minutes = add_leading_zero( minutes );
		hours = add_leading_zero( hours );
 
		return hours + ':' + minutes + ':' + seconds;
	}
	
	function show_time_left() {
		document.getElementById(output_element_id).innerHTML = format_output(moving_clock);
		
	}
 
	function no_time_left(output) {
		document.getElementById(output).innerHTML = no_time_left_message;
	}
 
	return {
		
		count: function () {
			
			countdown();
			show_time_left();
		},
		
		timer: function () {
			if(keep_counting) {
				setTimeout("javascript_countdown.timer();", 1000);
				javascript_countdown.count();
				
				if (keep_counting == 0) {
					no_time_left(output_element_id);
				} 
				
			}
		},
		//Kristian Messer requested recalculation of time that is left
		setTimeLeft: function (t) {
			moving_clock = t;
			if(keep_counting == 0) {
				javascript_countdown.timer();
			}
		},
		init: function (t, t2, moving_position) {
			
			
			moving_clock = t;
			static_clock = t2;
			
			if (moving_position == 1) {
				output_element_id = "position_1";
				static_element_id = "position_2";
			} else {
				output_element_id = "position_2";
				static_element_id = "position_1";
			}
					
			document.getElementById(static_element_id).innerHTML = format_output(static_clock);
			javascript_countdown.timer();
		}
	};
}();
 
</script>